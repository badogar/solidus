= Active Merchant
Добавлен интерфейс RoboKassa (http://robokassa.ru)

Пример использования (RoR):

в /config/enviroment.rb добавить
 
config.after_initialize do
  ActiveMerchant::Billing::Base.mode = :test || :live
end

class PaymentsController < ApplicationController
  def index
    @robo_kassa=  ActiveMerchant::Billing::RoboKassaGateway.new( { :login => 'login', 
                                              :password1 => 'p1', :password2 => 'p2'} )
  end
  
  def result
    @robo_kassa=  ActiveMerchant::Billing::RoboKassaGateway.new( { :login => 'login', 
                                              :password2 => 'p1', :pasword1 => 'p2'} )
    if @robo_kassa.result?(params)
       @status_operation = @robo_kassa.state_operation(params) - возвращает хэш состояние операции
      render :text => :ok, :status => :ok
    else
      render :text => :no, :status => 500
    end
  end

  def success
    @robo_kassa=  ActiveMerchant::Billing::RoboKassaGateway.new( { :login => 'login', 
                                                     :password1 => 'p1', :password2 => 'p2'} )
    if @robo_kassa.success?(params)
      flash[:notice] = 'Successfully'
      render :action => "success"      
    else
      flash[:error] = 'error'
      render :action => "success"
    end
  end
  
  def fail
    
  end

end


./payments/index.html.erb
<!-- Параметры кассы -->
<!-- invoice - номер счета -->
<!-- summa - сумма для оплаты -->
<!-- форма оплаты на странице магазина-->
<!-- shp_ - пользовательские данные, должны нач-ся с shp-->
<!-- :payment_currency - валюта платежа(WMR) -->
<!-- :language - язык взаимодействия с покупателем(RU) -->
<!-- :encoding - кодировка(utf-8) -->
<!-- :value - надпись на кнопке('Оплатить') -->
<!-- форма оплаты -->
<div><%= @robo_kassa.payment_kassa({:invoice => "23", :summa => 12} ) %></div>

<div>
  <div>Счет № 12 </div>
  <div>Сумма: 12</div>
<!-- кнопка оплаты -->
  <%= @robo_kassa.payment_button({:invoice => "23", :summa => 12, :value => "Оплатить"},{:shpa => "qiwi"} ) %> 
</div>


This library is supposed to aid in creating e-commerce software in Ruby.
In the future we want to support all "good" payment gateways.

This library is the foundation of commerce for http://www.shopify.com.

Please visit the {ActiveMerchant homepage}[http://activemerchant.org] for more resources, tutorials and other information about this project.

== Supported Direct Payment Gateways

The {ActiveMerchant Wiki}[http://github.com/Shopify/active_merchant/wikis] contains a {table of features supported by each gateway}[http://github.com/Shopify/active_merchant/wikis/gatewayfeaturematrix].

* {Authorize.Net CIM}[http://www.authorize.net/] - US
* {Authorize.Net}[http://www.authorize.net/] - US
* {Beanstream.com}[http://www.beanstream.com/] - CA
* {Braintree}[http://www.braintreepaymentsolutions.com] - US
* {CardStream}[http://www.cardstream.com/] - GB
* {CyberSource}[http://www.cybersource.com] - US
* {DataCash}[http://www.datacash.com/] - GB
* {Efsnet}[http://www.concordefsnet.com/] - US
* {eWAY}[http://www.eway.com.au/] - AU
* {E-xact}[http://www.e-xact.com] - CA, US
* {LinkPoint}[http://www.linkpoint.com/] - US
* {Merchant e-Solutions}[http://merchante-solutions.com/] - US
* {Modern Payments}[http://www.modpay.com] - US
* {Moneris}[http://www.moneris.com/] - CA
* {NetRegistry}[http://www.netregistry.com.au] - AU
* {NETbilling}[http://www.netbilling.com] - US
* {PayJunction}[http://www.payjunction.com/] - US
* {PaySecure}[http://www.commsecure.com.au/paysecure.shtml] - AU
* {PayPal Express Checkout}[https://www.paypal.com/cgi-bin/webscr?cmd=xpt/merchant/ExpressCheckoutIntro-outside] - US, CA, SG, AU
* {PayPal Payflow Pro}[https://www.paypal.com/cgi-bin/webscr?cmd=_payflow-pro-overview-outside] - US, CA, SG, AU
* {PayPal Website Payments Pro (UK)}[https://www.paypal.com/uk/cgi-bin/webscr?cmd=_wp-pro-overview-outside] - GB
* {PaymentExpress}[http://www.paymentexpress.com/] - AU, MY, NZ, SG, ZA, GB, US
* {PayPal Website Payments Pro (CA)}[https://www.paypal.com/cgi-bin/webscr?cmd=_wp-pro-overview-outside] - CA
* {PayPal Express Checkout}[https://www.paypal.com/cgi-bin/webscr?cmd=xpt/merchant/ExpressCheckoutIntro-outside] - US
* {PayPal Website Payments Pro (US)}[https://www.paypal.com/cgi-bin/webscr?cmd=_wp-pro-overview-outside] - US
* {Plug'n Pay}[http://www.plugnpay.com/] - US
* {Protx}[http://www.protx.com] - GB
* {Psigate}[http://www.psigate.com/] - CA
* {PSL Payment Solutions}[http://www.paymentsolutionsltd.com/] - GB
* {Quickpay}[http://quickpay.dk/] - DK
* {Realex}[http://www.realexpayments.com/] - IE, GB
* {Sage Payment Solutions}[http://www.sagepayments.com] - US, CA
* {SecurePay}[http://securepay.com.au] - AU
* {SecurePay}[http://www.securepay.com/] - US
* {SecurePayTech}[http://www.securepaytech.com/] - NZ
* {SkipJack}[http://www.skipjack.com/] - US, CA
* {TransFirst}[http://www.transfirst.com/] - US
* {TrustCommerce}[http://www.trustcommerce.com/] - US
* {USA ePay}[http://www.usaepay.com/] - US
* {Verifi}[http://www.verifi.com/] - US
* {ViaKLIX}[http://viaklix.com] - US
* {Wirecard}[http://www.wirecard.com] - DE

== Supported Offsite Payment Gateways

* {PayPal Website Payments Standard}[https://www.paypal.com/cgi-bin/webscr?cmd=_wp-standard-overview-outside]
* Chronopay[http://www.chronopay.com]
* Nochex[http://www.nochex.com]
* {Banca Sella GestPay}[https://www.sella.it/banca/ecommerce/gestpay/gestpay.jsp]
* {2 Checkout}[http://www.2checkout.com]
* {HiTRUST}[http://www.hitrust.com.hk/]

== Download

Currently this library is available with git from:

  git://github.com/Shopify/active_merchant.git

== Installation

=== From Git

You can check out the latest source from git:

  > git pull git://github.com/Shopify/active_merchant.git

=== As a Rails plugin

ActiveMerchant includes an init.rb file. This means that Rails will automatically load ActiveMerchant on startup. Run the following command from the root directory of your Rails project to install ActiveMerchant as a Rails plugin:

  > ./script/plugin install git://github.com/Shopify/active_merchant.git

=== From Ruby Gems

Installation from RubyGems

  > gem install activemerchant

== Sample Usage
  require 'rubygems'
  require 'active_merchant'

  # Use the TrustCommerce test servers
  ActiveMerchant::Billing::Base.mode = :test

  # ActiveMerchant accepts all amounts as Integer values in cents
  # $10.00
  amount = 1000

  # The card verification value is also known as CVV2, CVC2, or CID 
  credit_card = ActiveMerchant::Billing::CreditCard.new(
                  :first_name         => 'Bob',
                  :last_name          => 'Bobsen',
                  :number             => '4242424242424242',
                  :month              => '8',
                  :year               => '2012',
                  :verification_value => '123'
                )

  # Validating the card automatically detects the card type
  if credit_card.valid?

    # Create a gateway object for the TrustCommerce service
    gateway = ActiveMerchant::Billing::TrustCommerceGateway.new(
                :login => 'TestMerchant',
                :password => 'password'
              )

    # Authorize for the amount
    response = gateway.purchase(amount, credit_card)

    if response.success?
      puts "Successfully charged $#{sprintf("%.2f", amount / 100)} to the credit card #{credit_card.display_number}"
    else
      raise StandardError, response.message 
    end
  end

== Contributing

Please see the {ActiveMerchant Guide to Contributing}[http://github.com/Shopify/active_merchant/wikis/contributing] for information on adding a new gateway to ActiveMerchant.
